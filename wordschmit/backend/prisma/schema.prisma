// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  contents      Content[]
  templates     ContentTemplate[]
}

model Profile {
  id              String    @id @default(uuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  businessDetails Json      // Stores business name, industry, target audience, description
  contentPrefs    Json      // Stores content types, topics, tones, goals
  voiceProfile    Json      // Stores writing style, influencers, etc.
  metadata        Json      @default("{}") // Stores API keys and other sensitive data
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Content {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  type        String    // blog, linkedin, twitter
  title       String?
  content     String
  status      String    // draft, published, scheduled
  metadata    Json?     // For platform-specific data
  scheduledFor DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  template    ContentTemplate? @relation(fields: [templateId], references: [id])
  templateId  String?
  versions    ContentVersion[]
}

model ContentTemplate {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  name        String
  description String?
  type        String    // blog, linkedin, twitter
  structure   Json      // Template structure and prompts
  settings    Json      // Generation settings
  contents    Content[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ContentVersion {
  id          String    @id @default(uuid())
  contentId   String
  content     Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  version     Int
  data        String    // The actual content
  metadata    Json?     // Version-specific metadata
  createdAt   DateTime  @default(now())

  @@unique([contentId, version])
} 